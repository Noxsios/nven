datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/migrate-shadow
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  refresh_expires_in Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  workspaces    Workspace[]
  issuedTo1297  e1297[]     @relation("ISSUED_TO")
  issuedBy1297  e1297[]     @relation("ISSUED_BY")
  fysa1297      e1297[]     @relation("FYSA")
  workspaceId   String?

  @@index([name])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Workspace {
  id          String           @id @default(cuid())
  name        String
  users       User[]
  e1297       e1297[]
  collections ItemCollection[]
  items       Item[]
}

model Item {
  id           String          @id @default(cuid())
  name         String
  type         String
  nsn          String?
  description  String?
  e1297        e1297?          @relation(fields: [e1297Id], references: [id])
  e1297Id      String?
  collection   ItemCollection? @relation(fields: [collectionId], references: [id])
  collectionId String?
  workspace    Workspace       @relation(fields: [workspaceId], references: [id])
  workspaceId  String
  dateCreated  DateTime        @default(now())
  dateUpdated  DateTime        @updatedAt
}

model ItemCollection {
  id          String    @id @default(cuid())
  name        String
  type        String
  description String?
  items       Item[]
  dateCreated DateTime  @default(now())
  dateUpdated DateTime  @updatedAt
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
  e1297       e1297?    @relation(fields: [e1297Id], references: [id])
  e1297Id     String?
}

model e1297 {
  id           String           @id @default(cuid())
  title        String
  issuedTo     User[]           @relation("ISSUED_TO")
  issuedBy     User             @relation("ISSUED_BY", fields: [issuedById], references: [id])
  issuedById   String
  dateIssued   DateTime         @default(now())
  dateUpdated  DateTime         @updatedAt
  dateReturned DateTime
  items        Item[]
  collections  ItemCollection[]
  fysa         User[]           @relation("FYSA")
  Workspace    Workspace        @relation(fields: [workspaceId], references: [id])
  workspaceId  String
}
